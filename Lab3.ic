#define rMotor 3
#define lMotor 0
#define rSensor 3
#define lSensor 6

#define nnLimit -100.0
#define nLimit -25.0
#define lZero -4.0
#define uZero 4.0
#define pLimit 25.0
#define ppLimit 100.0


float crispLout;
float crispRout;


void main()
{
    while(1)
      {
        //calculates delta
        int delta = analog(lSensor) - analog(rSensor);
        printf("delta: %d\n", delta);
        fuzzy((float)delta);
        
        //actual motor output here
        motor(lMotor,(int)crispLout);
        motor(rMotor,(int)crispRout); 
    }
}

//fuzzify method
void fuzzy(float delta)
{
    if (delta < nLimit && delta >= nnLimit)
    {
       //negative big

       //THIS IS THE LINEAR INTERPOLATION
       if(delta < -62.5)
       {
          delta = (delta - (nnLimit)) / ((-62.5) - (nnLimit));
       }
       else
       {
          delta = ((nLimit) - delta) / ((nLimit) - (-62.5));
       }
        
        //call defuzzification on both motors
       crispRout = defuzz(delta,100.0);
       crispLout = defuzz(delta,0.0); 
    }
    
    if(delta >= nLimit && delta < lZero)
    {
        //negative small

       //THIS IS THE LINEAR INTERPOLATION
       if(delta < -14.5)
       {
          delta = (delta - (nLimit)) / ((-14.5) - (nLimit));
       }
       else
       {
          delta = ((lZero) - delta) / ((lZero) - (-14.5));
       }
        
        //call defuzzification on both motors
        crispRout = defuzz(delta,75.0);
        crispLout = defuzz(delta,25.0);
    }
   
    if(delta > uZero && delta <= pLimit)
    {
        //positive small


       //THIS IS THE LINEAR INTERPOLATION
       if(delta < 14.5)
       {
          delta = (delta - (uZero)) / ((14.5) - (uZero));
       }
       else
       {
          delta = ((pLimit) - delta) / ((pLimit) - (14.5));
       }

        //call defuzzification on both motors
        crispRout = defuzz(delta,25.0);
        crispLout = defuzz(delta,75.0);
    }
    
    if( delta > pLimit && delta <= ppLimit)
    {
     

        //positive big

       //THIS IS THE LINEAR INTERPOLATION
       if(delta < 62.5)
       {
          delta = (delta - (pLimit)) / ((62.5) - (pLimit));
       }
       else
       {
          delta = ((ppLimit) - delta) / ((ppLimit) - (62.5));
       }
        
        //call defuzzification on both motors
        crispRout = defuzz(delta,0.0);
        crispLout = defuzz(delta,100.0);
    }
    
    else
    {
        //zero
        crispRout = 50.0;
        crispLout = 50.0;  
    }
}

//defuzzification function
float defuzz(float delta, float motorSpeed)
{ 
    //makes sure no motor input is negative
    if(delta < 0.00)
    {
        return -1.00 * (delta * motorSpeed);
    }
    
    return delta * motorSpeed;                    //interpolated delta multiplied by the set
      //multiplication rate we want for each category
}
