#define lMotor 0
#define rMotor 2

#define clawMotor 3

#define lLightPhoto
#define rLightPhoto

#define lLinePhoto
#define rLinePhoto

#define lReflecto
#define rReflecto

#define lightThresh 100
#define lineThresh 100
#define reflectoThresh 20

void main()
{
    while(1)
      {
        //if there is a light on the left
        if(analog(lLightPhoto) > lightThresh)
          {
            //turn left and go to the block
            left();
            //drive to the block
            while(analog(lReflecto) > reflectoThresh && analog(rReflecto) > reflectoThresh)
              {
                forward();
            }
            //close the claw
            closeClaw();
            //turn around
            left();
            left();
            
            //
            while(analog(rLinePhoto) < lineThresh && analog(lLinePhoto) < lineThresh)
              {
                forward();
            }
            
            left();
        }
        
        //if there is a light on the right
        if(analog(rLightPhoto) > lightThresh)
          {
            //turn right
            right();
            //forward to the block
            while(analog(lReflecto) > reflectoThresh && analog(rReflecto) > reflectoThresh)
              {
                forward();
            }
            //close the claw
            closeClaw(); 
            
            //turn around
            left();
            left();
            
            while(analog(rLinePhoto) < lineThresh && analog(lLinePhoto) < lineThresh)
              {
                forward();
            }
            
            right();
        }
    }
}

void left()
{
    motor(rMotor, -25);
    motor(lMotor, 75);
    sleep(2.0);
}

void right()
{
    motor(rMotor, 75);
    motor(lMotor, -25);
    sleep(2.0);
}

void backup()
{
    motor(lMotor, -50);
    motor(rMotor, -50);
}

void forward()
{
    motor(lMotor, 50);
    motor(rMotor, 50);
}

void openClaw()
{
    motor(clawMotor, 25);
    sleep(0.3);
    motor(clawMotor, 0);
}

void closeClaw()
{
    motor(clawMotor, -25);
    sleep(0.3);
    motor(clawMotor, 0);
}
