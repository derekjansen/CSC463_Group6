#define lMotor 0
#define rMotor 2
#define clawMotor 3
#define lineSensorL //ENTER NUMBER
#define lineSensorR  //ENTER NUMBER
#define lReflecto //ENTER NUMBER
#define rReflecto //ENTER NUMBER

int numLeft = 0;

//TURN LEFT TIMING WILL NEED ADJUSTED TO ENSURE PERFECTO TURNS
//TURN OPPOSITE WILL NEED ADJUSTED TO ENSURE PERFECT 180



void main()
{
   while(1)
   {
      followLine();
   }
}


//FOLLOW THE LINE ISH
void followLine
{ 
      //go forward
      motor(lmotor, 50);
      motor(rmotor, 50);

      //if left hits black line
      if((analog(lineSensorR) >= blackLine))
      {
        motor(lmotor,20);
        motor(rmotor,70);
        while((analog(lineSensorR) < blackLine))
        {
          sleep(0.1);
        }
        //reset call to follow
        followLine();
      }
      
      //if right hits black line
      else if((analog(lineSensorL) >= blackLine))
      {
        motor(lmotor,70);
        motor(rmotor,20);
        while((analog(lineSensorL) < blackLine))
        {
          sleep(0.1);
        }
        //reset call to follow
        followLine();
      }
      
      //if both hit black line
      else if(((analog(lineSensorL) >= blackLine)) &&  ((analog(lineSensorR) >= blackLine)))
      {
        //stop
        stop();
        
        //call junction
        junction();
      }
    
}


//decides what to do at a junction
void junction()
{
   // THIS MIGHT NOT WORK AND ALL THIS ISH MIGHT NEED RETHOUGHT
   //If a light is found to the left turn left
   if(analog(lLightPhoto) > 100)
   {
      foundBlock();
   }
   else
   {
      
      if(numLeft%2 == 0)
      {
         followLine();
      }
      if(numLeft % 2 ==1)
      {
         turnLeft();
         numLeft++;
      }
   }  
}



//do block stuff
void foundBlock()
{  

     left();
     
     //determines how close it is to the wall
     while(analog(lReflecto) > 20 && analog(rReflecto) > 20)
     {
        forward();
     }
     
     //is close so stop 
     stop();
     
     //grab the block
     closeClaw();
     
     //turn around
     turnOppisite();
     
     //follow line again
     lineFollow();     
}




////////////// BASIC FUNCS ////////////

void turnOpposite()
{
   motor(lMotor,-75);
   motor(rMotor, 75);
   sleep(2.5);
}

void left()
{
    forward();
    sleep(1.0);
    motor(rMotor, -75);
    motor(lMotor, 75);
    sleep(1.5);
}

void forward()
{
    motor(lMotor, 50);
    motor(rMotor, 50);
}

void stop()
{
   motor(lMotor,0);
   motor(rMotor,0);
}

void openClaw()
{
    motor(clawMotor, 25);
    sleep(0.3);
    motor(clawMotor, 0);
}

void closeClaw()
{
    motor(clawMotor, -25);
    sleep(0.3);
    motor(clawMotor, 0);
}


